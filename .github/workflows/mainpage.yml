name: Anasayfa Güncelleme (Son)

on:
  push:
    paths:
      - '*.json'
    branches:
      - main

jobs:
  update-homepage:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Update Homepage JSON
      run: |
        node << 'EOF'
        const fs = require('fs');
        const path = require('path');
        
        // Tüm JSON dosyalarını tanımla
        const jsonFiles = [
          'birbakista.json', 'birlikdukkani.json', 'duyulanlar.json',
          'hazirolanlahasbihal.json', 'kelamikibar.json', 'kendinolmayageldin.json',
          'kussesleri.json', 'pelevin.json', 'sabahnesesi.json', 'simurg.json',
          'soylesikayitlari.json', 'tazecik.json', 'umutrehberi.json', 'varliginsevinci.json'
        ];
        
        // Mevcut anasayfa.json dosyasını oku veya oluştur
        let homepage = {
          son_guncelleme: new Date().toISOString(),
          header: {
            toplamlar: {}
          },
          isaretler: {
            taze: []
          }
        };
        
        if (fs.existsSync('anasayfa.json')) {
          try {
            homepage = JSON.parse(fs.readFileSync('anasayfa.json', 'utf8'));
            if (!homepage.header) homepage.header = { toplamlar: {} };
          } catch (error) {
            console.log('Mevcut anasayfa.json okunamadı, yeni oluşturuluyor');
          }
        }
        
        let processedFiles = 0;
        
        // Her dosyayı işle
        jsonFiles.forEach(fileName => {
          const filePath = fileName;
          const fileKey = fileName.replace('.json', '');
          
          if (fs.existsSync(filePath)) {
            try {
              const fileContent = fs.readFileSync(filePath, 'utf8');
              const data = JSON.parse(fileContent);
              
              // Toplam adet bilgisini al (farklı formatlara uyumlu)
              let totalCount = 0;
              if (typeof data.toplamadet === 'number') {
                totalCount = data.toplamadet;
              } else if (typeof data.toplamadet === 'string') {
                totalCount = parseInt(data.toplamadet) || 0;
              } else if (data.header && data.header.toplamadet) {
                totalCount = parseInt(data.header.toplamadet) || 0;
              }
              
              homepage.header.toplamlar[fileKey] = totalCount;
              
              // Taze verileri işle
              if (data.isaretler && Array.isArray(data.isaretler)) {
                const fileStats = fs.statSync(filePath);
                const sortedItems = data.isaretler
                  .filter(item => item.id && item.id.toString().startsWith('20'))
                  .sort((a, b) => b.id - a.id)
                  .slice(0, 3)
                  .map(item => ({
                    id: item.id,
                    text: item.text ? item.text.substring(0, 50) + (item.text.length > 50 ? '...' : '') : ''
                  }));
                
                const existingIndex = homepage.isaretler.taze.findIndex(item => item.yol === fileKey);
                
                if (existingIndex !== -1) {
                  homepage.isaretler.taze[existingIndex] = {
                    yol: fileKey,
                    tazeler: sortedItems,
                    son_guncelleme: fileStats.mtime.toISOString()
                  };
                } else {
                  homepage.isaretler.taze.push({
                    yol: fileKey,
                    tazeler: sortedItems,
                    son_guncelleme: fileStats.mtime.toISOString()
                  });
                }
                
                processedFiles++;
                console.log(`${fileKey} işlendi - Toplam: ${totalCount}`);
              }
            } catch (error) {
              console.error(`${fileKey} işlenirken hata:`, error.message);
              homepage.header.toplamlar[fileKey] = 0;
            }
          } else {
            console.log(`${fileKey} dosyası bulunamadı`);
            homepage.header.toplamlar[fileKey] = 0;
          }
        });
        
        // Son güncelleme zamanını ayarla
        homepage.son_guncelleme = new Date().toISOString();
        
        // Dosyaya yaz
        fs.writeFileSync('anasayfa.json', JSON.stringify(homepage, null, 2));
        console.log(`Güncelleme tamamlandı. İşlenen dosya: ${processedFiles}/${jsonFiles.length}`);
        console.log('Toplamlar:', homepage.header.toplamlar);
        EOF
    
    - name: Validate JSON
      run: |
        if ! jq empty anasayfa.json 2>/dev/null; then
          echo "❌ Geçersiz JSON formatı!"
          exit 1
        else
          echo "✅ JSON doğrulandı"
        fi
    
    - name: Commit and Push Changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add anasayfa.json
        
        if git diff --staged --quiet; then
          echo "Değişiklik yok"
        else
          git commit -m "🔄 Anasayfa güncellendi: $(date '+%Y-%m-%d %H:%M')"
          git push
          echo "Değişiklikler gönderildi"
        fi
